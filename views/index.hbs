<div class="row flex-grow-1">
	<div class="col-lg-3 d-flex">
		<div class="card w-100">
			<div class="card-body">
				<h5 class="card-title mb-4 history-text">History</h5>
				<ul class="navbar-nav navbar-dark" id="suggestionList">
					<li class="nav-item">
						<a class="nav-link" href="#">Contributors</a>
					</li>
					<li class="nav-item">
						<a class="nav-link pe-0" href="#">Documentation</a>
					</li>
				</ul>
			</div>
		</div>
	</div>
	<div class="col-lg-9 d-flex">
		<div class="card w-100">
			<div class="card-body">
				<form id="resumeForm">
					<div class="input-group dark-input-group mb-4 d-flex align-items-center">
						<span class="input-group-text upload-icon d-flex justify-content-center" id="uploadButton"><i
								class="fa-solid fa-paperclip"></i></span>
						<textarea name="resumeText" id="resumeText" class="form-control" aria-label="With textarea"
							rows="5" placeholder="Paste resume text here..."></textarea>
					</div>
					<input type="file" class="form-control-file d-none" id="resumeFile" name="resumeFile"
						accept=".pdf, .docx">
					<button class="btn btn-sm btn-secondary position-absolute shadow" id="sendButton" type="submit"><i
							class="fa-solid fa-arrow-up"></i></button>
				</form>
				<div id="results"></div>
			</div>
		</div>
	</div>
</div>
<script>
	document.getElementById('uploadButton').addEventListener('click', function () {
		document.getElementById('resumeFile').click();
	});
	
	//document.getElementById('resumeFile').addEventListener('change', function () {
	// Optionally show the file name or handle the file selection
	//console.log(this.files[0].name);
	//});

	document.getElementById('resumeForm').addEventListener('submit', function (e) {
		e.preventDefault();
		const formData = new FormData(this);
		const fileInput = document.getElementById('resumeFile');
		const textInput = document.getElementById('resumeText').value.trim();

		if (fileInput.files.length > 0) {
			formData.append('resumeFile', fileInput.files[0]);
		}


		if (!fileInput.files.length && !textInput) {
			document.getElementById('results').innerHTML = '<p>Please provide either resume text or upload a file.</p>';
			return;
		}

		axios.post('/process-data', formData)
			.then(response => {
				const formattedData = response.data.formattedData;
				updateResultsContainer(formattedData);
				loadSuggestions();
			})
			.catch(error => {
				console.error('Error:', error);
				document.getElementById('results').innerHTML = '<p>An error occurred. Please try again.</p>';
			});
	});

	function updateResultsContainer(formattedData) {
		const resultsContainer = document.getElementById('results');
		resultsContainer.innerHTML = `
		<h2>${formattedData.title}</h2>
		<h4 class="mt-3">Summary</h4>
		<p>${formattedData.summary}</p>
		<h4 class="mt-5">Industry Trends</h4>
		<p>${formattedData.industryTrends}</p>
		<h4 class="mt-5">Career Path</h4>
		<ul>
		${formattedData.careerPath.map(item => `
			<li>
			<strong>${item.role} (${item.percentageMatch}%)</strong>
			<p>${item.overview}</p>
			</li>
		`).join('')}
		</ul>
		<h4 class="mt-5">Salary Expectations</h4>
		<p>
			${Object.entries(formattedData.salaryExpectations).map(([role, salaryRange]) => `
			<strong>${role}:</strong> ${salaryRange}
			`).join('<br>')}
		</p>
		<h4 class="mt-5">Strong Skills</h4>
		 ${formattedData.strongSkills.map((category, index) => `
			<div>
			<strong>${category.category}:</strong>
			<p>${category.summary}</p>
			<ul>
				${category.skills.map(skill => `<li>${skill}</li>`).join('')}
			</ul>
			</div>
		`).join('')}
		<h4 class="mt-5">Suggested Learning</h4>
		<ul>${formattedData.suggestedLearning.map(item => `
		<li>
			<strong>${item.skill}</strong>
			<p>${item.explanation}</p>
		</li>
		`).join('')}</ul>
		<h4 class="mt-5">Suggested Certifications</h4>
		<ul>${formattedData.suggestedCertifications.map(cert => `
		<li>
			<strong>${cert.name}</strong>: <a href="${cert.link}" target="_blank">${cert.link}</a>
			<p>${cert.description}</p>
		</li>
		`).join('')}</ul>
	`;
	}

	// Load suggestions
	function loadSuggestions() {
		axios.get('/suggestions')
			.then(response => {
				const suggestions = response.data;
				const suggestionList = document.getElementById('suggestionList');
				const maxTitleLength = 25; // Maximum number of characters to display

				if (!suggestions.length) {
					suggestionList.innerHTML = '<li><p class="text-secondary">Nothing to display as yet...</p></li>';
					return;
				}
				suggestionList.innerHTML = suggestions.map(suggestion => {
					let truncatedTitle = suggestion.title;
					if (truncatedTitle.length > maxTitleLength) {
						truncatedTitle = truncatedTitle.substring(0, maxTitleLength) + '...';
					}
					return `
                    <li class="nav-item d-flex justify-content-between align-items-center">
                        <a class="nav-link" href="#" data-id="${suggestion._id}" title="${suggestion.title}">
                            ${truncatedTitle}
                        </a>
                        <i class="fa-regular fa-circle-xmark fa-sm delete-icon" data-id="${suggestion._id}"></i>
                    </li>
                `;
				}).join('');
			})
			.catch(error => {
				console.error('Error fetching suggestions:', error);
				document.getElementById('suggestionList').innerHTML = '<p>An error occurred while fetching suggestions.</p>';
			});
	}

	function loadSuggestionDetails(suggestionId) {
		axios.get(`/suggestions/${suggestionId}`)
			.then(response => {
				const formattedData = response.data.formattedData;
				updateResultsContainer(formattedData);
			})
			.catch(error => {
				console.error('Error fetching suggestion details:', error);
				document.getElementById('results').innerHTML = '<p>An error occurred while fetching the suggestion details.</p>';
			});
	}

	// Delete a suggestion
	function deleteSuggestion(suggestionId) {
		if (confirm('Are you sure you want to delete this suggestion?')) {
			axios.delete(`/suggestions/${suggestionId}`)
				.then(response => {
					console.log('Suggestion deleted:', suggestionId);
					loadSuggestions(); // Reload the suggestions list
				})
				.catch(error => {
					console.error('Error deleting suggestion:', error);
					alert('An error occurred while trying to delete the suggestion. Please try again.');
				});
		}
	}

	// Load suggestions on page load
	document.addEventListener('DOMContentLoaded', loadSuggestions);

	document.getElementById('suggestionList').addEventListener('click', function (event) {
		if (event.target && event.target.nodeName === 'A') {
			event.preventDefault();
			const suggestionId = event.target.getAttribute('data-id');
			if (suggestionId) {
				loadSuggestionDetails(suggestionId);
			}
		} else if (event.target && event.target.classList.contains('delete-icon')) {
			const suggestionId = event.target.getAttribute('data-id');
			if (suggestionId) {
				deleteSuggestion(suggestionId);
			}
		}
	});

</script>